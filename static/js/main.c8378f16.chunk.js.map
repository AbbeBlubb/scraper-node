{"version":3,"sources":["isFetching.js","App.js","serviceWorker.js","index.js"],"names":["IsFetching","className","App","state","data","fetch","then","response","json","setState","this","date","headers","length","map","object","index","title","key","href","url","target","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kOAEaA,EAAa,WACxB,OACE,yBAAKC,UAAU,OACb,gCACE,yBAAKA,UAAU,uCAEb,wBAAIA,UAAU,SACZ,0BAAMA,UAAU,aACd,0BAAMA,UAAU,YAAhB,gBAMJ,iGCiDKC,E,2MA5DbC,MAAM,CACJC,KAAM,M,mFAGa,IAAD,OAElBC,MAAM,+CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAF,GAAI,OAAI,EAAKK,SAAS,CAACL,c,+BAI/B,OAAIM,KAAKP,MAAMC,KAEX,yBAAKH,UAAU,OACb,gCACE,yBAAKA,UAAU,uCAEb,wBAAIA,UAAU,SACZ,0BAAMA,UAAU,aACd,0BAAMA,UAAU,YAAhB,aAMJ,0NACA,8CAAoBS,KAAKP,MAAMC,KAAK,GAAGO,KAAvC,sCAImC,IAAtCD,KAAKP,MAAMC,KAAK,GAAGQ,QAAQC,OAEtB,iCACE,qNAOF,iCACE,wBAAIZ,UAAU,0CACXS,KAAKP,MAAMC,KAAK,GAAGQ,QAAQE,KAAI,SAACC,EAAQC,GAAT,OAC9BD,EAAOE,MACH,wBAAIC,IAAKF,GAAO,uBAAGG,KAAMJ,EAAOK,IAAKC,OAAO,SAASC,IAAI,uBAAuBP,EAAOE,QACvF,WASb,kBAAC,EAAD,U,GAxDKM,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,iB","file":"static/js/main.c8378f16.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const IsFetching = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <header>\r\n        <div className=\"nes-container is-rounded with-title\">\r\n\r\n          <h1 className=\"title\">\r\n            <span className=\"nes-badge\">\r\n              <span className=\"is-error\">\r\n                Waiting...\r\n              </span>\r\n            </span>\r\n          </h1>\r\n\r\n          <p>\r\n            Poking the API server. Might take 5 seconds to get it running.\r\n          </p>\r\n\r\n        </div>\r\n      </header>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { IsFetching } from './isFetching'\r\n\r\n\r\nclass App extends React.Component {\r\n  state={\r\n    data: null // To test the ternary for broken queryselector: [{ headers: [] }] \r\n  }\r\n\r\n  componentDidMount() {\r\n    //fetch('http://localhost:4000/aftonbladet')\r\n    fetch('https://the-bitch.herokuapp.com/aftonbladet')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({data}))\r\n  }  \r\n\r\n  render() {\r\n    if (this.state.data) {\r\n      return (\r\n        <div className=\"app\">\r\n          <header>\r\n            <div className=\"nes-container is-rounded with-title\">\r\n\r\n              <h1 className=\"title\">\r\n                <span className=\"nes-badge\">\r\n                  <span className=\"is-error\">\r\n                    Scraper\r\n                  </span>\r\n                </span>\r\n              </h1>\r\n\r\n              <p>Scraping of the Aftonbladet news site is done when this page loads. Scraping request will fire once per day and else return a cached copy of the scraping result from earlier the same day.</p>\r\n              <p>Latest scraped: {this.state.data[0].date} (+2 hrs summer or +1 hr winter)</p>\r\n            </div>\r\n          </header>\r\n\r\n          {this.state.data[0].headers.length === 0\r\n            ? (\r\n                <section>\r\n                  <p>\r\n                    {`The Aftonbladet news site was scraped, but the scraping returned no headers.\r\n                    The scraper needs a new DOM selector structure and it seems I haven't noticed this!`}\r\n                  </p>\r\n                </section>\r\n              )\r\n            : (\r\n                <section>\r\n                  <ul className=\"nes-list is-circle nes-text is-primary\">\r\n                    {this.state.data[0].headers.map((object, index) => (\r\n                      object.title\r\n                        ? <li key={index}><a href={object.url} target='_blank' rel='noopener noreferrer'>{object.title}</a></li>\r\n                        : null\r\n                    ))}\r\n                  </ul>\r\n                </section>\r\n              )\r\n          }\r\n        </div>\r\n      );\r\n    } else {\r\n      return <IsFetching />\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}